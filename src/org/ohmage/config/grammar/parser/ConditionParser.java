/* Generated By:JavaCC: Do not edit this line. ConditionParser.java */
package org.ohmage.config.grammar.parser;

import org.ohmage.config.grammar.syntaxtree.Condition;
import org.ohmage.config.grammar.syntaxtree.Conjunction;
import org.ohmage.config.grammar.syntaxtree.Expr;
import org.ohmage.config.grammar.syntaxtree.Id;
import org.ohmage.config.grammar.syntaxtree.NodeChoice;
import org.ohmage.config.grammar.syntaxtree.NodeOptional;
import org.ohmage.config.grammar.syntaxtree.NodeSequence;
import org.ohmage.config.grammar.syntaxtree.NodeToken;
import org.ohmage.config.grammar.syntaxtree.Sentence;
import org.ohmage.config.grammar.syntaxtree.SentencePrime;
import org.ohmage.config.grammar.syntaxtree.Start;
import org.ohmage.config.grammar.syntaxtree.Value;

public class ConditionParser implements ConditionParserConstants {
	public static void main(String[] args)
	{
		try
		{
			new ConditionParser(new java.io.StringReader(args[0]));
			ConditionParser.start();
			System.out.println("Syntax is okay");
		}
		catch (Throwable e)
		{
			e.printStackTrace();
		}
	}

	static final public Start start() throws ParseException {
		Sentence n0;
		NodeToken n1;
		Token n2;
		n0 = sentence();
		n2 = jj_consume_token(0);
		n2.beginColumn++; n2.endColumn++;
		n1 = JTBToolkit.makeNodeToken(n2);
		return new Start(n0,n1);
	}

	static final public Sentence sentence() throws ParseException {
		NodeChoice n0;
		NodeSequence n1;
		Expr n2;
		SentencePrime n3;
		NodeSequence n4;
		NodeToken n5;
		Token n6;
		Sentence n7;
		NodeToken n8;
		Token n9;
		SentencePrime n10;
		if (jj_2_1(2)) {
			n1 = new NodeSequence(2);
			n2 = expr();
			n1.addNode(n2);
			n3 = sentence_prime();
			n1.addNode(n3);
			n0 = new NodeChoice(n1, 0);
	    }
		else if (jj_2_2(2)) {
			n4 = new NodeSequence(4);
			n6 = jj_consume_token(1);
			n5 = JTBToolkit.makeNodeToken(n6);
			n4.addNode(n5);
			n7 = sentence();
			n4.addNode(n7);
			n9 = jj_consume_token(2);
			n8 = JTBToolkit.makeNodeToken(n9);
			n4.addNode(n8);
			n10 = sentence_prime();
			n4.addNode(n10);
			n0 = new NodeChoice(n4, 1);
	    }
		else {
			jj_consume_token(-1);
			throw new ParseException();
	    }
		
		return new Sentence(n0);
	}

	static final public SentencePrime sentence_prime() throws ParseException {
		NodeOptional n0 = new NodeOptional();
		NodeSequence n1;
		Conjunction n2;
		Sentence n3;
		SentencePrime n4;
		if (jj_2_3(2)) {
			n1 = new NodeSequence(3);
			n2 = conjunction();
			n1.addNode(n2);
			n3 = sentence();
			n1.addNode(n3);
			n4 = sentence_prime();
			n1.addNode(n4);
			n0.addNode(n1);
		}
		
		return new SentencePrime(n0);
	}
	
	static final public Expr expr() throws ParseException {
		Id n0;
		Condition n1;
		Value n2;
		n0 = id();
		n1 = condition();
		n2 = value();
		
		return new Expr(n0,n1,n2);
	}
	
	static final public Id id() throws ParseException {
		NodeToken n0;
		Token n1;
		n1 = jj_consume_token(TEXT);
		n0 = JTBToolkit.makeNodeToken(n1);
		
		return new Id(n0);
	}
	
	static final public Condition condition() throws ParseException {
		NodeChoice n0;
		NodeToken n1;
		Token n2;
		NodeToken n3;
		Token n4;
		NodeToken n5;
		Token n6;
		NodeToken n7;
		Token n8;
		NodeToken n9;
		Token n10;
		NodeToken n11;
		Token n12;
		if (jj_2_4(2)) {
			n2 = jj_consume_token(3);
			n1 = JTBToolkit.makeNodeToken(n2);
			n0 = new NodeChoice(n1, 0);
		} 
		else if (jj_2_5(2)) {
			n4 = jj_consume_token(4);
			n3 = JTBToolkit.makeNodeToken(n4);
			n0 = new NodeChoice(n3, 1);
		} 
		else if (jj_2_6(2)) {
			n6 = jj_consume_token(5);
			n5 = JTBToolkit.makeNodeToken(n6);
			n0 = new NodeChoice(n5, 2);
		} 
		else if (jj_2_7(2)) {
			n8 = jj_consume_token(6);
			n7 = JTBToolkit.makeNodeToken(n8);
			n0 = new NodeChoice(n7, 3);
		} 
		else if (jj_2_8(2)) {
			n10 = jj_consume_token(7);
			n9 = JTBToolkit.makeNodeToken(n10);
			n0 = new NodeChoice(n9, 4);
		} 
		else if (jj_2_9(2)) {
			n12 = jj_consume_token(8);
			n11 = JTBToolkit.makeNodeToken(n12);
			n0 = new NodeChoice(n11, 5);
		} 
		else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		
		return new Condition(n0);
	}
	
	static final public Value value() throws ParseException {
		NodeToken n0;
		Token n1;
		n1 = jj_consume_token(TEXT);
		n0 = JTBToolkit.makeNodeToken(n1);
		
		return new Value(n0);
	}
	
	static final public Conjunction conjunction() throws ParseException {
		NodeChoice n0;
		NodeToken n1;
		Token n2;
		NodeToken n3;
		Token n4;
		if (jj_2_10(2)) {
			n2 = jj_consume_token(9);
			n1 = JTBToolkit.makeNodeToken(n2);
			n0 = new NodeChoice(n1, 0);
		} else if (jj_2_11(2)) {
			n4 = jj_consume_token(10);
			n3 = JTBToolkit.makeNodeToken(n4);
			n0 = new NodeChoice(n3, 1);
		} else {
			jj_consume_token(-1);
			throw new ParseException();
		}
		
		return new Conjunction(n0);
	}
	
	static private boolean jj_2_1(int xla) {
		jj_la = xla; 
		jj_lastpos = jj_scanpos = token;
		
		try { 
			return !jj_3_1(); 
		}
		catch(LookaheadSuccess ls) { 
			return true; 
		}
		finally { 
			jj_save(0, xla);
		}
	}
	
	static private boolean jj_2_2(int xla) {
		jj_la = xla; 
		jj_lastpos = jj_scanpos = token;
		
		try { 
			return !jj_3_2(); 
			}
		catch(LookaheadSuccess ls) { 
			return true; 
		}
		finally { 
			jj_save(1, xla);
		}
	}
	
	static private boolean jj_2_3(int xla) {
		jj_la = xla; 
		jj_lastpos = jj_scanpos = token;
		
		try {
			return !jj_3_3(); 
		}
		catch(LookaheadSuccess ls) { 
			return true;
		}
		finally { 
			jj_save(2, xla);
		}
	}
	
	static private boolean jj_2_4(int xla) {
		jj_la = xla; 
		jj_lastpos = jj_scanpos = token;
		
		try { 
			return !jj_3_4(); 
		}
		catch(LookaheadSuccess ls) { 
			return true; 
		}
		finally { 
			jj_save(3, xla); 
		}
	}
	
	static private boolean jj_2_5(int xla) {
		jj_la = xla; 
		jj_lastpos = jj_scanpos = token;
		
		try { 
			return !jj_3_5();
		}
		catch(LookaheadSuccess ls) { 
			return true;
		}
		finally { 
			jj_save(4, xla); 
		}
	}
	
	static private boolean jj_2_6(int xla) {
		jj_la = xla; 
		jj_lastpos = jj_scanpos = token;
		
		try { 
			return !jj_3_6();
		}
		catch(LookaheadSuccess ls) { 
			return true; 
		}
		finally { 
			jj_save(5, xla); 
		}
	}
	
	static private boolean jj_2_7(int xla) {
		jj_la = xla; 
		jj_lastpos = jj_scanpos = token;
		
		try { 
			return !jj_3_7(); 
		}
		catch(LookaheadSuccess ls) { 
			return true; 
		}
		finally { 
			jj_save(6, xla); 
		}
	}
	
	static private boolean jj_2_8(int xla) {
		jj_la = xla; 
		jj_lastpos = jj_scanpos = token;
		
		try { 
			return !jj_3_8(); 
		}
		catch(LookaheadSuccess ls) { 
			return true; 
		}
		finally { 
			jj_save(7, xla); 
		}
	}
	
	static private boolean jj_2_9(int xla) {
		jj_la = xla; 
		jj_lastpos = jj_scanpos = token;
		
		try { 
			return !jj_3_9(); 
		}
		catch(LookaheadSuccess ls) { 
			return true; 
		}
		finally { 
			jj_save(8, xla); 
		}
	}
	
	static private boolean jj_2_10(int xla) {
		jj_la = xla; 
		jj_lastpos = jj_scanpos = token;
		try { return !jj_3_10(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(9, xla); }
	}
	
	static private boolean jj_2_11(int xla) {
		jj_la = xla; jj_lastpos = jj_scanpos = token;
		try { return !jj_3_11(); }
		catch(LookaheadSuccess ls) { return true; }
		finally { jj_save(10, xla); }
	}
	
	static private boolean jj_3_11() {
		if (jj_scan_token(10)) return true;
		return false;
	}
	
	static private boolean jj_3R_1() {
		if (jj_3R_4()) return true;
		if (jj_3R_5()) return true;
		return false;
	}
	
	static private boolean jj_3_2() {
		if (jj_scan_token(1)) return true;
		if (jj_3R_2()) return true;
		return false;
	}
	
	static private boolean jj_3_5() {
		if (jj_scan_token(4))
			return true;
		return false;
	}
	
	static private boolean jj_3_10() {
		if (jj_scan_token(9)) return true;
		return false;
	}
	
	static private boolean jj_3_4() {
		if (jj_scan_token(3)) return true;
		return false;
	}
	
	static private boolean jj_3R_3() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_10()) {
			jj_scanpos = xsp;
			if (jj_3_11()) return true;
			}
		return false;
	}
	
	static private boolean jj_3R_5() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_4()) {
			jj_scanpos = xsp;
			if (jj_3_5()) {
				jj_scanpos = xsp;
				if (jj_3_6()) {
					jj_scanpos = xsp;
					if (jj_3_7()) {
						jj_scanpos = xsp;
						if (jj_3_8()) {
							jj_scanpos = xsp;
							if (jj_3_9()) return true;
						}
					}
				}
			}
		}
		return false;
	}
	
	static private boolean jj_3_1() {
		if (jj_3R_1()) return true;
		return false;
	}
	
	static private boolean jj_3R_4() {
		if (jj_scan_token(TEXT)) return true;
		return false;
	}
	
	static private boolean jj_3R_2() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_1()) {
			jj_scanpos = xsp;
			if (jj_3_2()) return true;
		}
		return false;
	}
	
	static private boolean jj_3_9() {
		if (jj_scan_token(8)) return true;
		return false;
	}
	
	static private boolean jj_3_8() {
		if (jj_scan_token(7)) return true;
		return false;
	}
	
	static private boolean jj_3_7() {
		if (jj_scan_token(6)) return true;
		return false;
	}
	
	static private boolean jj_3_3() {
		if (jj_3R_3()) return true;
		if (jj_3R_2()) return true;
		return false;
	}
	
	static private boolean jj_3_6() {
		if (jj_scan_token(5)) return true;
		return false;
	}
	
	static private boolean jj_initialized_once = false;
	/** Generated Token Manager. */
	static public ConditionParserTokenManager token_source;
	static SimpleCharStream jj_input_stream;
	/** Current token. */
	static public Token token;
	/** Next token. */
	static public Token jj_nt;
	static private Token jj_scanpos, jj_lastpos;
	static private int jj_la;
	static private int jj_gen;
	static final private int[] jj_la1 = new int[0];
	static private int[] jj_la1_0;
	static {
		jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] {};
	}
	static final private JJCalls[] jj_2_rtns = new JJCalls[11];
	static private boolean jj_rescan = false;
	static private int jj_gc = 0;
	
	/** Constructor with InputStream. */
	public ConditionParser(java.io.InputStream stream) {
		this(stream, null);
	}
	/** Constructor with InputStream and supplied encoding */
	public ConditionParser(java.io.InputStream stream, String encoding) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser.  ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
		token_source = new ConditionParserTokenManager(jj_input_stream);
		token = new Token();
		jj_gen = 0;
		for (int i = 0; i < 0; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}
	
	/** Reinitialise. */
	static public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}
	/** Reinitialise. */
	static public void ReInit(java.io.InputStream stream, String encoding) {
		try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
		ConditionParserTokenManager.ReInit(jj_input_stream);
		token = new Token();
		jj_gen = 0;
		for (int i = 0; i < 0; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}
	
	/** Constructor. */
	public ConditionParser(java.io.Reader stream) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser. ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new ConditionParserTokenManager(jj_input_stream);
		token = new Token();
		jj_gen = 0;
		for (int i = 0; i < 0; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}
	
	/** Reinitialise. */
	static public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		ConditionParserTokenManager.ReInit(jj_input_stream);
		token = new Token();
		jj_gen = 0;
		for (int i = 0; i < 0; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}
	
	/** Constructor with generated Token Manager. */
	public ConditionParser(ConditionParserTokenManager tm) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser. ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		token_source = tm;
		token = new Token();
		jj_gen = 0;
		for (int i = 0; i < 0; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}
	
	/** Reinitialise. */
	public void ReInit(ConditionParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_gen = 0;
		for (int i = 0; i < 0; i++) jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
	}
	
	static private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null) token = token.next;
		else token = token.next = ConditionParserTokenManager.getNextToken();
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen) c.first = null;
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}
	
	static private final class LookaheadSuccess extends java.lang.Error {
		private static final long serialVersionUID = 1L;
	}
	static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
	static private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = ConditionParserTokenManager.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0; Token tok = token;
			while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
			if (tok != null) jj_add_error_token(kind, i);
		}
		if (jj_scanpos.kind != kind) return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
		return false;
	}
	
	
	/** Get the next Token. */
	static final public Token getNextToken() {
		if (token.next != null) token = token.next;
		else token = token.next = ConditionParserTokenManager.getNextToken();
		jj_gen++;
		return token;
	}
	
	/** Get the specific Token. */
	static final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null) t = t.next;
			else t = t.next = ConditionParserTokenManager.getNextToken();
		}
		return t;
	}
	
	static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	static private int[] jj_expentry;
	static private int jj_kind = -1;
	static private int[] jj_lasttokens = new int[100];
	static private int jj_endpos;
	
	static private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100) return;
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
				int[] oldentry = (int[])(it.next());
				if (oldentry.length == jj_expentry.length) {
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							continue jj_entries_loop;
						}
													          }
					jj_expentries.add(jj_expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}
	
	/** Generate ParseException. */
	static public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[16];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 0; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1<<j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 16; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}			
		}	
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}
	
	/** Enable tracing. */
	static final public void enable_tracing() {
	}
	
	/** Disable tracing. */
	static final public void disable_tracing() {
	}
	
	static private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 11; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0: jj_3_1(); break;
						case 1: jj_3_2(); break;
						case 2: jj_3_3(); break;
						case 3: jj_3_4(); break;
						case 4: jj_3_5(); break;
						case 5: jj_3_6(); break;
						case 6: jj_3_7(); break;
						case 7: jj_3_8(); break;
						case 8: jj_3_9(); break;
						case 9: jj_3_10(); break;
						case 10: jj_3_11(); break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch(LookaheadSuccess ls) { }
		}
		jj_rescan = false;
	}
	
	static private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) { p = p.next = new JJCalls(); break; }
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
	}
	
	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}
	
}		

class JTBToolkit {
	static NodeToken makeNodeToken(Token t) {
		return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
	}
}
