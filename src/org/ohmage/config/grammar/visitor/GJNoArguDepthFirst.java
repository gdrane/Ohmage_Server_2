//
// Generated by JTB 1.3.2
//

package org.ohmage.config.grammar.visitor;
import java.util.Enumeration;

import org.ohmage.config.grammar.syntaxtree.Condition;
import org.ohmage.config.grammar.syntaxtree.Conjunction;
import org.ohmage.config.grammar.syntaxtree.Expr;
import org.ohmage.config.grammar.syntaxtree.Id;
import org.ohmage.config.grammar.syntaxtree.Node;
import org.ohmage.config.grammar.syntaxtree.NodeList;
import org.ohmage.config.grammar.syntaxtree.NodeListOptional;
import org.ohmage.config.grammar.syntaxtree.NodeOptional;
import org.ohmage.config.grammar.syntaxtree.NodeSequence;
import org.ohmage.config.grammar.syntaxtree.NodeToken;
import org.ohmage.config.grammar.syntaxtree.Sentence;
import org.ohmage.config.grammar.syntaxtree.SentencePrime;
import org.ohmage.config.grammar.syntaxtree.Start;
import org.ohmage.config.grammar.syntaxtree.Value;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
	//
	// Auto class visitors--probably don't need to be overridden.
	//
	public R visit(NodeList n) {
		R _ret=null;
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeListOptional n) {
		if ( n.present() ) {
			R _ret=null;
			int _count=0;
			for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
				e.nextElement().accept(this);
				_count++;
			}
			return _ret;
		}
		else
			return null;
	}

	public R visit(NodeOptional n) {
		if ( n.present() )
			return n.node.accept(this);
		else
			return null;
	}

	public R visit(NodeSequence n) {
		R _ret=null;
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public R visit(NodeToken n) { return null; }

	//
	// User-generated visitor methods below
	//
	
	/**
	 * f0 -> Sentence()
	 * f1 -> <EOF>
	 */
	public R visit(Start n) {
		R _ret=null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Expr() SentencePrime()
	 *       | "(" Sentence() ")" SentencePrime()
	 */
	public R visit(Sentence n) {
		R _ret=null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> ( Conjunction() Sentence() SentencePrime() )?
	 */
	public R visit(SentencePrime n) {
		R _ret=null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Id()
	 * f1 -> Condition()
	 * f2 -> Value()
	 */
	public R visit(Expr n) {
		R _ret=null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> <TEXT>
	 */
	public R visit(Id n) {
		R _ret=null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "=="
	 *       | "!="
	 *       | "<"
	 *       | ">"
	 *       | "<="
	 *       | ">="
	 */
	public R visit(Condition n) {
		R _ret=null;
		n.f0.accept(this);
		return _ret;
	}	

	/**
	 * f0 -> <TEXT>
	 */
	public R visit(Value n) {
		R _ret=null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "and"
	 *       | "or"
	 */
	public R visit(Conjunction n) {
		R _ret=null;
		n.f0.accept(this);
		return _ret;
   }
}