<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
         
  <!--  Filters: executed in the order in which they are defined in this file, but specific to the filter-mappings -->
  
  <!--  Pushes the session id into the Log4J NDC for each request thread. The NDC is a Stack that is dumped to the log 
        for all Log4J messages.
  -->
  <filter>
    <filter-name>Log4jNdcFilter</filter-name>
    <filter-class>org.ohmage.jee.filter.Log4jNdcFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>Log4jNdcFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping> 
  
  <!--  Enforces UTF-8 character encoding on all requests. --> 
  <filter>
    <filter-name>Utf8RequestEncodingFilter</filter-name>
    <filter-class>org.ohmage.jee.filter.Utf8RequestEncodingFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>Utf8RequestEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <!-- Servlets.  Note that url-patterns are matched against initial (or re-dispatched) requests, not a request possibly modified
       by filters.  -->
  <servlet>
    <servlet-name>RequestServlet</servlet-name>
    <servlet-class>org.ohmage.jee.servlet.RequestServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>RequestServlet</servlet-name>
    <url-pattern>/*</url-pattern>
  </servlet-mapping>

  <!--  The default Tomcat Servlet used to locate and serve static content -->
  <servlet>
    <servlet-name>default</servlet-name>
    <servlet-class>org.apache.catalina.servlets.DefaultServlet</servlet-class>
    <init-param>
      <param-name>debug</param-name>
      <param-value>0</param-value>
    </init-param>
    <init-param>
      <param-name>listings</param-name>
      <param-value>false</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.html</url-pattern>
  </servlet-mapping>
  
  <!-- For ohmage 2.x and up, the server app is effectively headless. There is probably a better way to return headers only.
       empty.html is returned in order override the default Tomcat error pages. It is rarely a good idea to give away 
       information about the app server and the Tomcat pages do just that. -->
  <welcome-file-list>
    <welcome-file>/empty.html</welcome-file>
  </welcome-file-list>
  <error-page>
    <error-code>500</error-code>
    <location>/empty.html</location>
  </error-page>
  <error-page>
    <error-code>404</error-code>
    <location>/empty.html</location>
  </error-page>
  <error-page>
    <error-code>405</error-code>
    <location>/empty.html</location>
  </error-page>   
  
  <!-- Parameter with comma separated list of files (or patterns) that tells Spring where to pick up bean configurations. -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>/WEB-INF/spring/*.xml</param-value>
  </context-param>

  <!-- The order of the following listener components is important - ContextLoaderListener must be last. -->
  
  <!-- Bootstrap listener to initialize Log4J.  Having this one here (before Spring is bootstrapped with its ContextLoaderListener)
       ensures Log4J is configured before Spring spits out logging messages. -->
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>

  <!-- Provide temp directory cleanup (for temp image storage) and ensure that the cleanup process terminates gracefully on 
       app termination -->
  <listener>
    <listener-class>org.apache.commons.fileupload.servlet.FileCleanerCleanup</listener-class>
  </listener>

  <!-- Bootstrap listener to start up Spring's root WebApplicationContext. Should be after the Log4jConfigListener if such is
       used. --> 
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!-- Sets the webapp's session timeout (minutes). -->
  <session-config>
    <session-timeout>1</session-timeout>
  </session-config>
</web-app>
